{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/templates/blog-item.js","webpack://flexible-gatsby/./src/templates/blog-list.js"],"names":["SEO","description","lang","meta","metaImage","postImage","title","path","site","useStaticQuery","metaDescription","siteMetadata","image","src","siteUrl","postUrl","htmlAttributes","titleTemplate","name","content","property","author","concat","width","height","defaultProps","BlogItems","render","this","props","items","map","node","className","key","fields","slug","frontmatter","img","childImageSharp","gatsbyImageData","Link","to","style","backgroundImage","images","fallback","excerpt","date","timeToRead","React","BlogIndex","data","siteTitle","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","keywords","role","rel"],"mappings":"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","file":"component---src-templates-blog-list-js-33fe4c5587ce795dee52.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, postImage: metaImage, title, path }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author,\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const postUrl = `${site.siteMetadata.siteUrl}${path}`\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:url`,\n          content: postUrl,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:image`,\n          content: image,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n      .concat(\n        image\n          ? [\n              {\n                property: \"og:image\",\n                content: image,\n              },\n              {\n                property: \"og:image:width\",\n                content: metaImage.width,\n              },\n              {\n                property: \"og:image:height\",\n                content: metaImage.height,\n              },\n              {\n                name: \"twitter:card\",\n                content: \"summary_large_image\",\n              },\n            ]\n          : [\n              {\n                name: \"twitter:card\",\n                content: \"summary\",\n              },\n            ]\n      )\n      .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nclass BlogItems extends React.Component {\n    render() {\n        const posts = this.props.items\n        return(\n            posts.map(({ node }) => {\n                return (\n                  <article className=\"post\" key={node.fields.slug}>\n                    {node.frontmatter.img &&\n                      node.frontmatter.img.childImageSharp &&\n                      node.frontmatter.img.childImageSharp.gatsbyImageData && (\n                        <Link\n                          to={node.fields.slug}\n                          className=\"post-thumbnail\"\n                          style={{\n                            backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\n                          }}\n                        />\n                      )}\n                    <div className=\"post-content\">\n                      <h2 className=\"post-title\">\n                        <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                      </h2>\n                      <p>{node.excerpt}</p>\n                      <span className=\"post-date\">\n                        {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                      </span>\n                      <span className=\"post-words\">\n                        {node.timeToRead} minute read\n                      </span>\n                    </div>\n                  </article>\n                )\n              })\n        )\n        \n    }\n}\n\nexport default BlogItems","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\nimport BlogItems from './blog-item'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : \"../\" + (currentPage - 1).toString()\n    const nextPage = \"../\" + (currentPage + 1).toString()\n\n    return (\n      <DefaultLayout>\n        <SEO\n          title={siteTitle}\n          keywords={[`blog`, `gatsby`, `javascript`, `react`, `aparna ravindra`, `books review`]}\n        />\n        <div className=\"content-box clearfix\">\n          <BlogItems items={posts} />\n          <div className=\"container\">\n            <nav className=\"pagination\" role=\"navigation\">\n              <ul>\n                {!isFirst && (\n                  <p>\n                    <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                      ← Previous Page\n                    </Link>\n                  </p>\n                )}\n                <p>\n                  <span className=\"page-number\">\n                    Page {currentPage} of {numPages}\n                  </span>\n                </p>\n                {!isLast && (\n                  <p>\n                    <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                      Next Page →\n                    </Link>\n                  </p>\n                )}\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { isFuture: {  eq: false } } \n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"YYYY, MMM DD\")\n            img {\n              childImageSharp {\n                gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH, formats: [AUTO, AVIF, WEBP])\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}