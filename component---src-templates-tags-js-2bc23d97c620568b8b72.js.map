{"version":3,"sources":["webpack://flexible-gatsby/./src/templates/blog-item.js","webpack://flexible-gatsby/./src/templates/tags.js"],"names":["BlogItems","render","this","props","items","map","node","className","key","fields","slug","frontmatter","img","childImageSharp","gatsbyImageData","Link","to","style","backgroundImage","images","fallback","src","title","excerpt","date","timeToRead","React","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader"],"mappings":"wJAGMA,E,6FACFC,OAAA,WAEI,OADcC,KAAKC,MAAMC,MAEfC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACT,OACE,2BAASC,UAAU,OAAOC,IAAKF,EAAKG,OAAOC,MACxCJ,EAAKK,YAAYC,KAChBN,EAAKK,YAAYC,IAAIC,iBACrBP,EAAKK,YAAYC,IAAIC,gBAAgBC,iBACnC,gBAAC,EAAAC,KAAD,CACEC,GAAIV,EAAKG,OAAOC,KAChBH,UAAU,iBACVU,MAAO,CACLC,gBAAgB,OAAQZ,EAAKK,YAAYC,IAAIC,gBAAgBC,gBAAgBK,OAAOC,SAASC,IAA9E,OAIvB,uBAAKd,UAAU,gBACb,sBAAIA,UAAU,cACZ,gBAAC,EAAAQ,KAAD,CAAMC,GAAIV,EAAKG,OAAOC,MAAOJ,EAAKK,YAAYW,QAEhD,yBAAIhB,EAAKiB,SACT,wBAAMhB,UAAU,aACbD,EAAKK,YAAYa,KADpB,QAGA,wBAAMjB,UAAU,cACbD,EAAKmB,WADR,sB,GA1BEC,aAsCxB,O,oFCHA,UAjCa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,gBAAC,IAAD,KACE,uBAAKtB,UAAU,wBACb,uBAAKA,UAAU,aACb,0BAAK0B,GAaL,gBAAC,IAAD,CAAW7B,MAAO2B,IAClB,4BACE,gBAAC,EAAAhB,KAAD,CAAMC,GAAG,SAAT","file":"component---src-templates-tags-js-2bc23d97c620568b8b72.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nclass BlogItems extends React.Component {\n    render() {\n        const posts = this.props.items\n        return(\n            posts.map(({ node }) => {\n                return (\n                  <article className=\"post\" key={node.fields.slug}>\n                    {node.frontmatter.img &&\n                      node.frontmatter.img.childImageSharp &&\n                      node.frontmatter.img.childImageSharp.gatsbyImageData && (\n                        <Link\n                          to={node.fields.slug}\n                          className=\"post-thumbnail\"\n                          style={{\n                            backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\n                          }}\n                        />\n                      )}\n                    <div className=\"post-content\">\n                      <h2 className=\"post-title\">\n                        <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                      </h2>\n                      <p>{node.excerpt}</p>\n                      <span className=\"post-date\">\n                        {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                      </span>\n                      <span className=\"post-words\">\n                        {node.timeToRead} minute read\n                      </span>\n                    </div>\n                  </article>\n                )\n              })\n        )\n        \n    }\n}\n\nexport default BlogItems","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport BlogItems from './blog-item'\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`\n  return (\n    <Layout>\n      <div className=\"content-box clearfix\">\n        <div className=\"blog-tags\">\n          <h1>{tagHeader}</h1>\n          {/* <ul className=\"tag-list\">\n            {edges.map(({ node }) => {\n              const { title, date } = node.frontmatter\n              const { slug } = node.fields\n              return (\n                <li key={slug}>\n                  <Link to={slug}>{title}</Link>\n                  <small> | {date}</small>\n                </li>\n              )\n            })}\n          </ul> */}\n          <BlogItems items={edges} />\n          <span>\n            <Link to=\"/tags\">← All tags</Link>\n          </span>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } }, isFuture: {  eq: false }  }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"YYYY, MMM DD\")\n            img {\n              childImageSharp {\n                gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH, formats: [AUTO, AVIF, WEBP])\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}