{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/templates/blog-list.js"],"names":["SEO","description","lang","meta","metaImage","postImage","title","site","useStaticQuery","metaDescription","siteMetadata","image","src","siteUrl","console","log","htmlAttributes","titleTemplate","name","content","property","author","concat","width","height","defaultProps","BlogIndex","render","data","this","props","siteTitle","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","keywords","className","map","node","key","fields","slug","frontmatter","img","childImageSharp","gatsbyImageData","Link","to","style","backgroundImage","images","fallback","excerpt","date","timeToRead","role","rel","React"],"mappings":"yJAYA,SAASA,EAAT,GAAwE,IAAzDC,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,KAAiBC,EAAoB,EAA/BC,UAAsBC,EAAS,EAATA,MACpDC,GAASC,oBAAe,aAAxBD,KAeFE,EAAkBR,GAAeM,EAAKG,aAAaT,YACnDU,EACJP,GAAaA,EAAUQ,IAAvB,GACOL,EAAKG,aAAaG,QAAUT,EAAUQ,IACzC,KAEN,OADIE,QAAQC,IAAIJ,GAEd,gBAAC,IAAD,CACEK,eAAgB,CACdd,QAEFI,MAAOA,EACPW,cAAa,QAAUV,EAAKG,aAAaJ,MACzCH,KAAM,CACJ,CACEe,KAAK,cACLC,QAASV,GAEX,CACEW,SAAS,WACTD,QAASb,GAEX,CACEc,SAAS,iBACTD,QAASV,GAEX,CACEW,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASZ,EAAKG,aAAaW,QAE7B,CACEH,KAAK,gBACLC,QAASb,GAEX,CACEY,KAAK,sBACLC,QAASV,IAGZa,OACCX,EACI,CACE,CACES,SAAU,WACVD,QAASR,GAEX,CACES,SAAU,iBACVD,QAASf,EAAUmB,OAErB,CACEH,SAAU,kBACVD,QAASf,EAAUoB,QAErB,CACEN,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIlBG,OAAOnB,KAKdH,EAAIyB,aAAe,CACjBvB,KAAK,KACLC,KAAM,GACNF,YAAY,IAed,O,+FCvHMyB,E,6FACJC,OAAA,WACE,IAAQC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKrB,KAAKG,aAAaJ,MACnC0B,EAAQJ,EAAKK,kBAAkBC,MACrC,EAAkCL,KAAKC,MAAMK,YAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEnC,MAAOyB,EACPY,SAAU,CAAC,OAAD,kEAEZ,uBAAKC,UAAU,wBACZZ,EAAMa,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,2BAASF,UAAU,OAAOG,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,iBACnC,gBAAC,EAAAC,KAAD,CACEC,GAAIT,EAAKE,OAAOC,KAChBL,UAAU,iBACVY,MAAO,CACLC,gBAAgB,OAAQX,EAAKI,YAAYC,IAAIC,gBAAgBC,gBAAgBK,OAAOC,SAAS/C,IAA9E,OAIvB,uBAAKgC,UAAU,gBACb,sBAAIA,UAAU,cACZ,gBAAC,EAAAU,KAAD,CAAMC,GAAIT,EAAKE,OAAOC,MAAOH,EAAKI,YAAY5C,QAEhD,yBAAIwC,EAAKc,SACT,wBAAMhB,UAAU,aACbE,EAAKI,YAAYW,KADpB,QAGA,wBAAMjB,UAAU,cACbE,EAAKgB,WADR,qBAOR,uBAAKlB,UAAU,aACb,uBAAKA,UAAU,aAAamB,KAAK,cAC/B,2BACIzB,GACA,yBACE,gBAAC,EAAAgB,KAAD,CAAMC,GAAIf,EAAUwB,IAAI,OAAOpB,UAAU,eAAzC,oBAKJ,yBACE,wBAAMA,UAAU,eAAhB,QACQR,EADR,OACyBC,KAGzBE,GACA,yBACE,gBAAC,EAAAe,KAAD,CAAMC,GAAIb,EAAUsB,IAAI,OAAOpB,UAAU,eAAzC,sB,GAhEIqB,aA8ExB","file":"component---src-templates-blog-list-js-5180feb180c9537cbfa1.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, postImage: metaImage, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author,\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n      console.log(image)\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n      .concat(\n        image\n          ? [\n              {\n                property: \"og:image\",\n                content: image,\n              },\n              {\n                property: \"og:image:width\",\n                content: metaImage.width,\n              },\n              {\n                property: \"og:image:height\",\n                content: metaImage.height,\n              },\n              {\n                name: \"twitter:card\",\n                content: \"summary_large_image\",\n              },\n            ]\n          : [\n              {\n                name: \"twitter:card\",\n                content: \"summary\",\n              },\n            ]\n      )\n      .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      <DefaultLayout>\n        <SEO\n          title={siteTitle}\n          keywords={[`blog`, `gatsby`, `javascript`, `react`, `aparna ravindra`, `books review`]}\n        />\n        <div className=\"content-box clearfix\">\n          {posts.map(({ node }) => {\n            return (\n              <article className=\"post\" key={node.fields.slug}>\n                {node.frontmatter.img &&\n                  node.frontmatter.img.childImageSharp &&\n                  node.frontmatter.img.childImageSharp.gatsbyImageData && (\n                    <Link\n                      to={node.fields.slug}\n                      className=\"post-thumbnail\"\n                      style={{\n                        backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\n                      }}\n                    />\n                  )}\n                <div className=\"post-content\">\n                  <h2 className=\"post-title\">\n                    <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                  </h2>\n                  <p>{node.excerpt}</p>\n                  <span className=\"post-date\">\n                    {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                  </span>\n                  <span className=\"post-words\">\n                    {node.timeToRead} minute read\n                  </span>\n                </div>\n              </article>\n            )\n          })}\n          <div className=\"container\">\n            <nav className=\"pagination\" role=\"navigation\">\n              <ul>\n                {!isFirst && (\n                  <p>\n                    <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                      ← Previous Page\n                    </Link>\n                  </p>\n                )}\n                <p>\n                  <span className=\"page-number\">\n                    Page {currentPage} of {numPages}\n                  </span>\n                </p>\n                {!isLast && (\n                  <p>\n                    <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                      Next Page →\n                    </Link>\n                  </p>\n                )}\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY, MMM DD\")\n            title\n            img {\n              childImageSharp {\n                gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH, formats: [AUTO, AVIF, WEBP])\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}