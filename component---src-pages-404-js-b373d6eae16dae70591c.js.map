{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/pages/404.js"],"names":["SEO","description","lang","meta","metaImage","postImage","title","site","useStaticQuery","metaDescription","siteMetadata","image","src","siteUrl","console","log","htmlAttributes","titleTemplate","name","content","property","author","concat","width","height","defaultProps","NotFoundPage","render","this","props","data","React"],"mappings":"yJAYA,SAASA,EAAT,GAAwE,IAAzDC,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,KAAiBC,EAAoB,EAA/BC,UAAsBC,EAAS,EAATA,MACpDC,GAASC,oBAAe,aAAxBD,KAeFE,EAAkBR,GAAeM,EAAKG,aAAaT,YACnDU,EACJP,GAAaA,EAAUQ,IAAvB,GACOL,EAAKG,aAAaG,QAAUT,EAAUQ,IACzC,KAEN,OADIE,QAAQC,IAAIJ,GAEd,gBAAC,IAAD,CACEK,eAAgB,CACdd,QAEFI,MAAOA,EACPW,cAAa,QAAUV,EAAKG,aAAaJ,MACzCH,KAAM,CACJ,CACEe,KAAK,cACLC,QAASV,GAEX,CACEW,SAAS,WACTD,QAASb,GAEX,CACEc,SAAS,iBACTD,QAASV,GAEX,CACEW,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASZ,EAAKG,aAAaW,QAE7B,CACEH,KAAK,gBACLC,QAASb,GAEX,CACEY,KAAK,sBACLC,QAASV,IAGZa,OACCX,EACI,CACE,CACES,SAAU,WACVD,QAASR,GAEX,CACES,SAAU,iBACVD,QAASf,EAAUmB,OAErB,CACEH,SAAU,kBACVD,QAASf,EAAUoB,QAErB,CACEN,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIlBG,OAAOnB,KAKdH,EAAIyB,aAAe,CACjBvB,KAAK,KACLC,KAAM,GACNF,YAAY,IAed,O,qFCxHMyB,E,6FACJC,OAAA,WACmBC,KAAKC,MAAdC,KAER,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKxB,MAAM,mBACX,sDACA,6B,GARmByB,aAc3B","file":"component---src-pages-404-js-b373d6eae16dae70591c.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, postImage: metaImage, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author,\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n      console.log(image)\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n      .concat(\n        image\n          ? [\n              {\n                property: \"og:image\",\n                content: image,\n              },\n              {\n                property: \"og:image:width\",\n                content: metaImage.width,\n              },\n              {\n                property: \"og:image:height\",\n                content: metaImage.height,\n              },\n              {\n                name: \"twitter:card\",\n                content: \"summary_large_image\",\n              },\n            ]\n          : [\n              {\n                name: \"twitter:card\",\n                content: \"summary\",\n              },\n            ]\n      )\n      .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n}\n\nexport default SEO\n","import React from 'react'\n\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const { data } = this.props\n\n    return (\n      <DefaultLayout>\n        <SEO title=\"404: Not Found\" />\n        <h1>That page doesn&#39;t exist.</h1>\n        <br />\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default NotFoundPage\n"],"sourceRoot":""}